Fluxo de Deploy de VM Windows no Proxmox

Tecnologias Utilizadas

Proxmox: Plataforma de virtualização utilizada para hospedar e gerenciar as VMs.

Cloud-Init: Configuração inicial automatizada da VM, incluindo rede e credenciais.

Ansible: Ferramenta de automação utilizada para interagir com a API do Proxmox e realizar a criação e configuração das VMs.

YAML: Linguagem de formatação utilizada para escrever os playbooks do Ansible.

QEMU: Hypervisor utilizado pelo Proxmox para criar e gerenciar VMs.

Cloudbase-Init: Ferramenta utilizada para aplicar configurações de inicialização em VMs Windows.

Groovy: Linguagem utilizada para escrever os pipelines no Jenkins.

Jenkins: Ferramenta de CI/CD utilizada para orquestrar a execução do playbook do Ansible.

Fluxo do Deploy

Execução da Pipeline no Jenkins

O pipeline solicita ao usuário o nome da VM.

Validação do nome da VM (evita caracteres inválidos).

Atribui o nome da VM a uma variável de ambiente.

Execução do Playbook Ansible

O playbook se conecta à API do Proxmox.

Clona um template de VM Windows existente.

Configura as interfaces de rede e VLANs.

Inicia a VM.

Configuração da VM com Cloudbase-Init

Aplica configurações de inicialização na VM Windows.

Define credenciais de acesso.

Configura rede e hostname automaticamente.

Validação e Finalização

O pipeline verifica se o playbook foi executado com sucesso.

Mensagem de sucesso é exibida.

Se houver erro, a execução é interrompida e os logs são exibidos.

Código do Pipeline (Jenkinsfile)

pipeline {
    agent any

    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
        ANSIBLE_CONFIG = '/repo/ansible/ansible.cfg'
    }

    stages {
        stage('Solicitar Nome da VM') {
            steps {
                script {
                    def userInput = input(
                        id: 'VM_NAME_INPUT',
                        message: 'Por favor, insira o nome da VM:',
                        parameters: [string(name: 'VM_NAME', defaultValue: '', description: 'Nome da VM a ser criada')]
                    )
                    
                    if (!userInput || userInput.trim() == "") {
                        error "O nome da VM não foi fornecido."
                    }

                    if (!userInput.matches(/^[a-zA-Z0-9.-]+$/)) {
                        error "Nome inválido: ${userInput}"
                    }

                    env.VM_NAME = userInput
                }
            }
        }

        stage('Executar Playbook Ansible') {
            steps {
                script {
                    sh "ansible-playbook /repo/ansible/playbooks/create_vm_from_template_v_3.yml -e vm_name=${env.VM_NAME}"
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline concluída!'
        }
    }
}

Código do Playbook Ansible

- hosts: localhost
  connection: local
  gather_facts: false
  vars:
    proxmox_api_url: "https://192.168.18.200:8006/api2/json"
    proxmox_token: "root@pam!jenkins=TOKEN_AQUI"
    node: "pve"
    storage: "NVME_STORAGE"
    template_id: 110
    vmid: 207
    network_bridge: "vmbr400"
    vlan_tag: 400

  tasks:
    - name: Clonar o template
      uri:
        url: "{{ proxmox_api_url }}/nodes/{{ node }}/qemu/{{ template_id }}/clone"
        method: POST
        headers:
          Authorization: "PVEAPIToken {{ proxmox_token }}"
        body_format: json
        body:
          newid: "{{ vmid }}"
          name: "{{ vm_name }}"
          target: "{{ node }}"
          full: true
          storage: "{{ storage }}"
        validate_certs: false
      register: clone_vm

    - name: Verificar sucesso na clonagem
      fail:
        msg: "Erro: {{ clone_vm.json }}"
      when: clone_vm.status != 200 or clone_vm.json.errors is defined

    - name: Aguardar clonagem
      wait_for:
        timeout: 300

    - name: Configurar rede da VM
      uri:
        url: "{{ proxmox_api_url }}/nodes/{{ node }}/qemu/{{ vmid }}/config"
        method: POST
        headers:
          Authorization: "PVEAPIToken {{ proxmox_token }}"
        body_format: json
        body:
          net0: "virtio,bridge={{ network_bridge }},tag={{ vlan_tag }},firewall=1"
          onboot: 1
          tags: "bi;cliente"
          vga: "virtio"
        validate_certs: false
      register: configure_vm

    - name: Verificar configuração
      fail:
        msg: "Erro: {{ configure_vm.json }}"
      when: configure_vm.status != 200 or configure_vm.json.errors is defined

    - name: Ligar a VM
      uri:
        url: "{{ proxmox_api_url }}/nodes/{{ node }}/qemu/{{ vmid }}/status/start"
        method: POST
        headers:
          Authorization: "PVEAPIToken {{ proxmox_token }}"
        validate_certs: false
      register: start_vm

    - name: Verificar inicialização
      fail:
        msg: "Erro: {{ start_vm.json }}"
      when: start_vm.status != 200 or start_vm.json.errors is defined

Conclusão

Este documento descreve o fluxo de deploy automatizado de uma VM Windows no Proxmox utilizando Jenkins, Ansible, e Cloudbase-Init. O processo garante que a VM seja clonada corretamente, configurada e iniciada com sucesso.

